<?php
/**
 * @file
 * Tests for the hello world module.
 */

class HelloworldTests extends DrupalWebTestCase {

  private $admin_user;

  /**
   * Metadata about our test case.
   */
  public static function getInfo() {
    return array(
      'name' => 'Hello World',
      'description' => 'Tests for the Hello World module.',
      'group' => 'Hello World Group',
    );
  }

  /**
   * Perform any setup tasks for our test case.
   */
  public function setUp() {
    parent::setUp(array('helloworld', 'statistics'));

    variable_set('statistics_enable_access_log', 1);
    variable_set('statistics_count_content_views', 1);
    $this->refreshVariables();

    // Create users for running tests.
    $this->admin_user = $this->drupalCreateUser(array('create article content', 'administer site configuration', 'access content', 'view post access counter'));
  }

  public function _testHelloWorld() {
    $this->drupalGet('helloworld');
    $this->assertText('Hello World. Welcome to Drupal.', 'The page content is present.');

    $variable = FALSE;
    $this->assertFalse($variable, 'The value is false.');

    $first = $second = 'rainbows';
    $this->assertEqual($first, $second, 'The two variables are equal.');

    $first = 1;
    $second = '1';
    // $this->assertIdentical($first, $second, 'The variables are identical.');

    $this->assertNoText('Tacos', 'Tacos is not found.');

    // $this->assertRaw('<p>', 'There is a p tag.');

    $this->assertFieldByName('name', '', 'The username field is present.');
  }

  public function _testNavigation() {
    // http://example.com/helloworld
    $this->drupalGet('helloworld');
    $this->assertResponse(200, 'The page is available.');

    $this->clickLink('Create new account');
    // example.com/user/register.
    $this->assertUrl('user/register');
  }


  public function _testForms() {
    $this->drupalGet('helloworld/form');

    $this->assertFieldByXpath("//form[@id='helloworld-cake-form']//input[@name='name']", '', 'The name field is present.');
    $this->assertFieldByName('choice', 'cake', 'The choice field is present.');

    $data = array(
      'name' => '',
      'choice' => 'chicken',
    );
    $this->drupalPost('helloworld/form', $data, 'Submit');
    $this->assertText('Your name field is required.', 'Name field is required.');

    $data = array(
      'name' => 'Joe',
      'choice' => 'cake',
    );

    $this->drupalPost('helloworld/form', $data, 'Submit');
    $this->assertText("We're out of cake!", 'Cake error is displayed when cake is selected.');

    $this->drupalPost('helloworld/form', $data, 'Equivocate');
    $this->assertText('Make up your mind!', 'Equivocate button works.');

    $data = array(
      'name' => 'Joe',
      'choice' => 'chicken',
    );
    $this->drupalPost('helloworld/form', $data, 'Submit');
    $this->assertText('Joe, you chose chicken', 'Form works with valid data.');

  }


  function _testAuthorization() {
    $this->drupalLogin($this->admin_user);

    $this->drupalGet('admin/config/system/site-information');

    $site_name = $this->randomString(10);
    $data = array(
      'site_name' => $site_name,
    );
    $this->drupalPost('admin/config/system/site-information', $data, 'Save configuration');

    $this->assertTitle('Site information | ' . $site_name);

    $this->drupalLogout();
  }

  function _testCreateContent() {
    $this->drupalLogin($this->admin_user);

    $title = $this->randomName();
    $settings = array(
      'type' => 'page',
      'promote' => 1,
      'title' => $title,
      // body[und][0][value]
      // body[und][0][format]
      'body' => array(LANGUAGE_NONE => array(
        array(
          'value' => 'Copy goes here',
          'format' => filter_default_format(),
        ),
      )),
    );
    $node = $this->drupalCreateNode($settings);

    $this->drupalGet('node/' . $node->nid);
    $this->assertText($title, 'Node title was found.');

    $this->drupalGet('node/' . $node->nid);
    $this->assertText('1 read', 'Stats module shows 1 read.');

    $this->drupalGet('node/' . $node->nid);
    $this->assertText('2 reads', 'Stats module shows 2 reads.');
  }

  function testFileUploads() {
    $this->drupalLogin($this->admin_user);

    $images = $this->drupalGetTestFiles('image');
    // $this->verbose(print_r($images, TRUE));
    $image_realpath = drupal_realpath($images[0]->uri);

    $edit = array(
      'title' => 'Test Article With Image',
      'files[field_image_und_0]' => $image_realpath,
    );

    $this->drupalPostAJAX('node/add/article', $edit, 'field_image_und_0_upload_button');

    $this->assertFieldByName('field_image[und][0][alt]', NULL, 'Alt field is visible.');

    $this->drupalPost(NULL, array('title' => 'Testing AJAX'), t('Save'));

    $custom_file = drupal_get_path('module', 'helloworld') . '/tests/test.csv';
    $realpath = drupal_realpath($custom_file);
  }

}

class HellowordCloneTests extends DrupalCloneTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Hello World Clone',
      'description' => 'Tests that run against a clone of our site instead of a fresh install.',
      'group' => 'Hello World Group',
    );
  }

  public function setUp() {
    parent::setUp();
  }

  public function testAboutPage() {
    $this->drupalGet('about');
    $this->assertResponse(200, 'The about page exists.');
    $this->assertText('This is the about page.', 'The about page text is correct.');
  }
}







